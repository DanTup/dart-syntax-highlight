>// Copyright 2022 The Chromium Authors. All rights reserved.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.dart
>// Use of this source code is governed by a BSD-style license that can be
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.dart
>// found in the LICENSE file.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.dart
>
>library foo;
#^^^^^^^ meta.declaration.dart keyword.other.import.dart
#       ^^^^ meta.declaration.dart
#           ^ meta.declaration.dart punctuation.terminator.dart
>
>external int get externalInt;
#^^^^^^^^ keyword.declaration.dart
#         ^^^ support.class.dart
#             ^^^ keyword.declaration.dart
#                            ^ punctuation.terminator.dart
>
>typedef StringAlias = String;
#^^^^^^^ keyword.declaration.dart
#        ^^^^^^^^^^^ support.class.dart
#                    ^ keyword.operator.assignment.dart
#                      ^^^^^^ support.class.dart
#                            ^ punctuation.terminator.dart
>typedef void FunctionAlias1(String a, String b);
#^^^^^^^ keyword.declaration.dart
#        ^^^^ storage.type.primitive.dart
#             ^^^^^^^^^^^^^^ support.class.dart
#                            ^^^^^^ support.class.dart
#                                    ^ punctuation.comma.dart
#                                      ^^^^^^ support.class.dart
#                                               ^ punctuation.terminator.dart
>typedef FunctionAlias2 = void Function(String a, String b);
#^^^^^^^ keyword.declaration.dart
#        ^^^^^^^^^^^^^^ support.class.dart
#                       ^ keyword.operator.assignment.dart
#                         ^^^^ storage.type.primitive.dart
#                              ^^^^^^^^ support.class.dart
#                                       ^^^^^^ support.class.dart
#                                               ^ punctuation.comma.dart
#                                                 ^^^^^^ support.class.dart
#                                                          ^ punctuation.terminator.dart
>
>void misc(int a, {required int b}) {
#^^^^ storage.type.primitive.dart
#     ^^^^ entity.name.function.dart
#          ^^^ support.class.dart
#               ^ punctuation.comma.dart
#                  ^^^^^^^^ storage.modifier.dart
#                           ^^^ support.class.dart
>  assert(true);
#  ^^^^^^ keyword.control.dart
#         ^^^^ constant.language.dart
#              ^ punctuation.terminator.dart
>  assert(1 == 1, 'fail');
#  ^^^^^^ keyword.control.dart
#         ^ constant.numeric.dart
#           ^^ keyword.operator.comparison.dart
#              ^ constant.numeric.dart
#               ^ punctuation.comma.dart
#                 ^^^^^^ string.interpolated.single.dart
#                        ^ punctuation.terminator.dart
>
>  var a = new String.fromCharCode(1);
#  ^^^ storage.type.primitive.dart
#        ^ keyword.operator.assignment.dart
#          ^^^ keyword.control.new.dart
#              ^^^^^^ support.class.dart
#                    ^ punctuation.dot.dart
#                     ^^^^^^^^^^^^ entity.name.function.dart
#                                  ^ constant.numeric.dart
#                                    ^ punctuation.terminator.dart
>  const b = int.fromEnvironment('');
#  ^^^^^ storage.modifier.dart
#          ^ keyword.operator.assignment.dart
#            ^^^ support.class.dart
#               ^ punctuation.dot.dart
#                ^^^^^^^^^^^^^^^ entity.name.function.dart
#                                ^^ string.interpolated.single.dart
#                                   ^ punctuation.terminator.dart
>  final c = '';
#  ^^^^^ storage.modifier.dart
#          ^ keyword.operator.assignment.dart
#            ^^ string.interpolated.single.dart
#              ^ punctuation.terminator.dart
>  late final d = '';
#  ^^^^ storage.modifier.dart
#       ^^^^^ storage.modifier.dart
#               ^ keyword.operator.assignment.dart
#                 ^^ string.interpolated.single.dart
#                   ^ punctuation.terminator.dart
>  print(d is String);
#  ^^^^^ entity.name.function.dart
#          ^^ keyword.operator.dart
#             ^^^^^^ support.class.dart
#                    ^ punctuation.terminator.dart
>  print(d is! String);
#  ^^^^^ entity.name.function.dart
#          ^^ keyword.operator.dart
#            ^ keyword.operator.logical.dart
#              ^^^^^^ support.class.dart
#                     ^ punctuation.terminator.dart
>}
>
>class Covariance<T> {
#^^^^^ keyword.declaration.dart
#      ^^^^^^^^^^ support.class.dart
#                ^ other.source.dart
#                 ^ support.class.dart
#                  ^ other.source.dart
>  void covariance(covariant List<T> items) {}
#  ^^^^ storage.type.primitive.dart
#       ^^^^^^^^^^ entity.name.function.dart
#                  ^^^^^^^^^ keyword.declaration.dart
#                            ^^^^ support.class.dart
#                                ^ other.source.dart
#                                 ^ support.class.dart
#                                  ^ other.source.dart
>}
